{% extends "base.html.twig" %}


{% block body %}

<h3 class="text-center my-5">Trello de base</h3>

<div class="container d-flex justify-content-around flex-wrap">

  {% for list in allList %}
  <div class="card m-3" style="width: 18rem;">
    <div class="card-body">

      <h5 class="card-title" style="color:{{ list.color }}">{{ list.name }}</h5>

      <ul>
        {# avec le tableau de taches dans l entité list #}
        {% for task in list.tasks %}
        <div class="d-flex m-1 align-items-baseline div-task">
          {# si la tache est complété coche #} {# si on coche la ckeckbox sa renvoi au controleur mise a jour status
          tache ( avec onchange) #}
          {# ======= coche la tache 1ere methode avec checkbox =========== #}
          {# <input type="checkbox" {{ task.completed ? "checked" : "" }}
            onchange="window.location.href='/update-task-status/{{task.id}}'"> #}
          {# ======= coche la tache 2eme methode asynchrone =========== #}
          <a href="/update-task-status/{{task.id}}" class="js-status">
            {# si case coché -> icone carré plein#}
            {% if task.completed %}
            <i class="bi bi-check-square-fill icon-check"></i>
            {% else %}
            {# sinon -> icone carré vide#}

            <i class="bi bi-square icon-check"></i>
            {% endif %}

          </a>
          <p class="card-text p-1 text-task"> {{task.title}}</p>
          {# bouton supprimer tache#}
          <a href="/delete-task/{{task.id}}" class="text-info  delete-task"><i class="bi bi-x-circle"></i></i></a>
        </div>
        {% endfor %}
        {# bouton ajouter tache#}
        <a href="/create-task/{{list.id}}" class="btn btn-info"><i class="bi bi-plus-circle-dotted"></i></a>
      </ul>
      <div class="d-flex justify-content-end">
        {# bouton modifier liste#}
        <a href="/update-list/{{list.id}}" class="btn btn-warning  m-2"><i class="bi bi-pencil-square"></i></a>
        {# bouton supprimer liste#}
        <a href="/delete-list/{{list.id}}" class="btn btn-danger  m-2"><i class="bi bi-calendar-x"></i></a>
      </div>

    </div>
  </div>
  {% endfor %}

</div>

{% block javascripts %}
{# axios pour faire de l asynchrone (inserer son cdn) #}

{#
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script> #}

<script>
// recupere tous les liens a=href pour la checkbox et la suppression des taches
  window.addEventListener('load', event => {
    // qd la page est chargé je récupere tous les lien a contenant icones checkbox
    document.querySelectorAll("a.js-status").forEach(link => {
      // qd on clique sur un des icones récupéré -> updateStatus()
      link.addEventListener('click', updateStatus);
    });
    // qd la page est chargé je récupere tous les lien de suppresion des taches
    document.querySelectorAll("a.delete-task").forEach(linkTask => {
      // qd on clique sur l'icone de suppression de la tache -> deleteTask()
      linkTask.addEventListener('click', deleteTask);
    });
  });



/* ==================== COCHER TACHE EN ASYNCHRONE =========================== */
  function updateStatus(event) {
    // bloque le renvoi sur le lien href au click (pour le faire en asynchrone après)
    event.preventDefault();
    // recupere l icone cliqué (classe identique pour icon coché est vide)
    const checkIcon = this.querySelector('i.icon-check');
    // requete asynchrone (sur l url de la balise a)
    fetch(this.href).then(response => {
      // si la classe de l icon contient ('coché')
      if (checkIcon.classList.contains('bi-check-square-fill')) {
        // remplace ds la classe coché par non coché
        checkIcon.classList.replace('bi-check-square-fill', 'bi-square')
      } else {
        // inverse
        checkIcon.classList.replace('bi-square', 'bi-check-square-fill')
      }
    }).catch(error => {
      console.error(error);
      window.alert('une erreur est survenue')
    })
  }


/* ==================== SUPPRIMER TACHE EN ASYNCHRONE =========================== */
  function deleteTask(event) {
    // bloque le renvoi sur le lien href au click (pour le faire en asynchrone après)
    event.preventDefault();
    const deleteTaskButton = this.querySelector('i.bi-x-circle'); // recup le bouton cliqué
    fetch(this.href).then(response => {
        let elemParentFirst = deleteTaskButton.parentElement; // recup son 1er parent
        let elemParentSecond = elemParentFirst.parentElement; // recup son 2eme parent
       deleteTaskButton.remove(); //supprime tout
       elemParentFirst.remove();
       elemParentSecond.remove();
    }).catch(error => {
      console.error(error);
      window.alert('une erreur est survenue')
    })
  }

</script>
{% endblock %}
{% endblock body %}